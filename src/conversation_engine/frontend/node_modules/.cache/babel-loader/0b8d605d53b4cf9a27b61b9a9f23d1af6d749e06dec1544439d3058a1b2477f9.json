{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useCallback } from 'react';\n\n/**\n * Custom hook for conversation state management\n * \n * Architecture Decision: Centralized conversation state\n * with support for multiple conversation threads\n */\nexport const useConversation = () => {\n  _s();\n  const [conversations, setConversations] = useState({});\n  const [currentConversation, setCurrentConversation] = useState('default');\n\n  // Create a new conversation\n  const createConversation = useCallback((conversationId = null) => {\n    const id = conversationId || Date.now().toString();\n    setConversations(prev => ({\n      ...prev,\n      [id]: {\n        id,\n        messages: [],\n        createdAt: new Date().toISOString(),\n        lastActivity: new Date().toISOString()\n      }\n    }));\n    setCurrentConversation(id);\n    return id;\n  }, []);\n\n  // Add message to conversation\n  const addMessage = useCallback((conversationId, message) => {\n    setConversations(prev => {\n      var _prev$conversationId;\n      return {\n        ...prev,\n        [conversationId]: {\n          ...prev[conversationId],\n          messages: [...(((_prev$conversationId = prev[conversationId]) === null || _prev$conversationId === void 0 ? void 0 : _prev$conversationId.messages) || []), message],\n          lastActivity: new Date().toISOString()\n        }\n      };\n    });\n  }, []);\n\n  // Update message in conversation\n  const updateMessage = useCallback((conversationId, messageId, updates) => {\n    setConversations(prev => {\n      var _prev$conversationId2;\n      return {\n        ...prev,\n        [conversationId]: {\n          ...prev[conversationId],\n          messages: ((_prev$conversationId2 = prev[conversationId]) === null || _prev$conversationId2 === void 0 ? void 0 : _prev$conversationId2.messages.map(msg => msg.id === messageId ? {\n            ...msg,\n            ...updates\n          } : msg)) || []\n        }\n      };\n    });\n  }, []);\n\n  // Delete message from conversation\n  const deleteMessage = useCallback((conversationId, messageId) => {\n    setConversations(prev => {\n      var _prev$conversationId3;\n      return {\n        ...prev,\n        [conversationId]: {\n          ...prev[conversationId],\n          messages: ((_prev$conversationId3 = prev[conversationId]) === null || _prev$conversationId3 === void 0 ? void 0 : _prev$conversationId3.messages.filter(msg => msg.id !== messageId)) || []\n        }\n      };\n    });\n  }, []);\n\n  // Switch to different conversation\n  const switchConversation = useCallback(conversationId => {\n    if (conversations[conversationId]) {\n      setCurrentConversation(conversationId);\n    }\n  }, [conversations]);\n\n  // Clear conversation\n  const clearConversation = useCallback(conversationId => {\n    setConversations(prev => ({\n      ...prev,\n      [conversationId]: {\n        ...prev[conversationId],\n        messages: []\n      }\n    }));\n  }, []);\n\n  // Delete conversation\n  const deleteConversation = useCallback(conversationId => {\n    setConversations(prev => {\n      const newConversations = {\n        ...prev\n      };\n      delete newConversations[conversationId];\n      return newConversations;\n    });\n\n    // Switch to default conversation if current was deleted\n    if (currentConversation === conversationId) {\n      setCurrentConversation('default');\n    }\n  }, [currentConversation]);\n\n  // Get conversation summary\n  const getConversationSummary = useCallback(conversationId => {\n    const conversation = conversations[conversationId];\n    if (!conversation) return null;\n    return {\n      id: conversation.id,\n      messageCount: conversation.messages.length,\n      lastActivity: conversation.lastActivity,\n      createdAt: conversation.createdAt,\n      lastMessage: conversation.messages[conversation.messages.length - 1]\n    };\n  }, [conversations]);\n\n  // Initialize default conversation if none exists\n  if (!conversations[currentConversation]) {\n    createConversation(currentConversation);\n  }\n  return {\n    conversations,\n    currentConversation,\n    createConversation,\n    addMessage,\n    updateMessage,\n    deleteMessage,\n    switchConversation,\n    clearConversation,\n    deleteConversation,\n    getConversationSummary\n  };\n};\n_s(useConversation, \"YcfNFLMEFqOt/DYQ5xyjzqHZW10=\");","map":{"version":3,"names":["useState","useCallback","useConversation","_s","conversations","setConversations","currentConversation","setCurrentConversation","createConversation","conversationId","id","Date","now","toString","prev","messages","createdAt","toISOString","lastActivity","addMessage","message","_prev$conversationId","updateMessage","messageId","updates","_prev$conversationId2","map","msg","deleteMessage","_prev$conversationId3","filter","switchConversation","clearConversation","deleteConversation","newConversations","getConversationSummary","conversation","messageCount","length","lastMessage"],"sources":["/Users/andy/Dev/SIDHE/src/conversation_engine/frontend/src/hooks/useConversation.js"],"sourcesContent":["import { useState, useCallback } from 'react';\n\n/**\n * Custom hook for conversation state management\n * \n * Architecture Decision: Centralized conversation state\n * with support for multiple conversation threads\n */\nexport const useConversation = () => {\n  const [conversations, setConversations] = useState({});\n  const [currentConversation, setCurrentConversation] = useState('default');\n  \n  // Create a new conversation\n  const createConversation = useCallback((conversationId = null) => {\n    const id = conversationId || Date.now().toString();\n    \n    setConversations(prev => ({\n      ...prev,\n      [id]: {\n        id,\n        messages: [],\n        createdAt: new Date().toISOString(),\n        lastActivity: new Date().toISOString()\n      }\n    }));\n    \n    setCurrentConversation(id);\n    return id;\n  }, []);\n  \n  // Add message to conversation\n  const addMessage = useCallback((conversationId, message) => {\n    setConversations(prev => ({\n      ...prev,\n      [conversationId]: {\n        ...prev[conversationId],\n        messages: [...(prev[conversationId]?.messages || []), message],\n        lastActivity: new Date().toISOString()\n      }\n    }));\n  }, []);\n  \n  // Update message in conversation\n  const updateMessage = useCallback((conversationId, messageId, updates) => {\n    setConversations(prev => ({\n      ...prev,\n      [conversationId]: {\n        ...prev[conversationId],\n        messages: prev[conversationId]?.messages.map(msg => \n          msg.id === messageId ? { ...msg, ...updates } : msg\n        ) || []\n      }\n    }));\n  }, []);\n  \n  // Delete message from conversation\n  const deleteMessage = useCallback((conversationId, messageId) => {\n    setConversations(prev => ({\n      ...prev,\n      [conversationId]: {\n        ...prev[conversationId],\n        messages: prev[conversationId]?.messages.filter(msg => msg.id !== messageId) || []\n      }\n    }));\n  }, []);\n  \n  // Switch to different conversation\n  const switchConversation = useCallback((conversationId) => {\n    if (conversations[conversationId]) {\n      setCurrentConversation(conversationId);\n    }\n  }, [conversations]);\n  \n  // Clear conversation\n  const clearConversation = useCallback((conversationId) => {\n    setConversations(prev => ({\n      ...prev,\n      [conversationId]: {\n        ...prev[conversationId],\n        messages: []\n      }\n    }));\n  }, []);\n  \n  // Delete conversation\n  const deleteConversation = useCallback((conversationId) => {\n    setConversations(prev => {\n      const newConversations = { ...prev };\n      delete newConversations[conversationId];\n      return newConversations;\n    });\n    \n    // Switch to default conversation if current was deleted\n    if (currentConversation === conversationId) {\n      setCurrentConversation('default');\n    }\n  }, [currentConversation]);\n  \n  // Get conversation summary\n  const getConversationSummary = useCallback((conversationId) => {\n    const conversation = conversations[conversationId];\n    if (!conversation) return null;\n    \n    return {\n      id: conversation.id,\n      messageCount: conversation.messages.length,\n      lastActivity: conversation.lastActivity,\n      createdAt: conversation.createdAt,\n      lastMessage: conversation.messages[conversation.messages.length - 1]\n    };\n  }, [conversations]);\n  \n  // Initialize default conversation if none exists\n  if (!conversations[currentConversation]) {\n    createConversation(currentConversation);\n  }\n  \n  return {\n    conversations,\n    currentConversation,\n    createConversation,\n    addMessage,\n    updateMessage,\n    deleteMessage,\n    switchConversation,\n    clearConversation,\n    deleteConversation,\n    getConversationSummary\n  };\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}